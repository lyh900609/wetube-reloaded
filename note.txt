ㅁpackage.json 설정
  - 기본설정: npm init
  - scripts 설정후 -> 터미널에서 npm run "설정한 명령어"
   -> 서버시작, css 압축, 웹사이트에 빌듼
  - express설치: npm i express 
  - babel.js설치: 최신 js를 노드가 이해할 수 있게 변환
    "devDependencies": {
      "@babel/core": "^7.23.6",
      "@babel/node": "^7.22.19",
      "@babel/preset-env": "^7.23.6"}
  -> 설치 및 scripts에서 babel-node index.js로 명령
  const express = require("express"); 
  -> import express from "express";
    * dependencies : 프로젝트 니즈, 필수적
    * devDependencies: 사람 니즈. 보조적(babel.js 등)
  -노디몬 설치 
    -> 파일 수정을 자동으로 체크해 줌
    -> npm i nodemon --save-dev
    ->스크립트  "dev": "nodemon --exec babel-node index.js"

ㅁ서버생성
- import express from "express";
  const app = express()  <-- 이걸 듣게해야함
- (서버)는 무엇을 들어야 하는가?
 ->서버는 항상 켜져 있는 인터넷에 연결된 컴퓨터이다
 ->서버는 항시 request를 듣는다 == listening
  0. const app = express();  
  1. 서버에게 어떤 port를 listening 할지 설정
  2. callback 작성
   =app.listen(4000, handleListening)
- 서버생성후 cannot GET / ==> GET은 HTTP method임
 1. http request는 웹사이트에 접속하고 서버에 정보를 보내는 방법
  -get 브라우저가 웹사이트에 request를 해 페이지를 가져오는 것
- request /response
  1. function(req, res){};
- 리퀘스트 종료 const handleHome = (req, res) => {
  return res.end(); //*request 종료. request가 왔으면 response를 return해줘야함.
}

ㅁ미들웨어
  const gossipMiddleware = (req, res, next) => {
    console.log("I'm in middle!!") 
    next(); //*완료가 되고 난 후에 handleHome을 진행
  };

  const handleHome = (req, res) => {
    return res.end(); 
  };

  app.get("/", gossipMiddleware, handleHome);

  - handleHome은 finalware
  - 만약 next()전에 return을 쓰게 되면 미들웨어 기능을 못함. *next()전에 끝나기 때문


ㅁ라우터
 - 컨트롤러와 URL 관리를 도와줌 -> 미니어플리케이션 만듬
 - 이번 플젝의 도메인은 유저/도메인 두개
   -> 라우터는 도메인을 기반으로 URL을 그룹화 해줌
 
 (글로벌 라우터)
 *이론상 users/join 등이 맞지만, 조인로그인 등은 별도로 제작하는 걸 선호
 /join
 /login
 /search

 (유터라우터/비디오 라오터)
 /edit-users -> Edit user
  =users/edit
 /delete-users -> Delete user
  =users/delete
 /watch-video -> Watch video
  =vidoe/watch
 /edit-video -> Edit video
  =video/edit
 /delete-vidoe -> Delete video
  =video/delete

ㅁ인라인 펑션
 -app.get("/". () => console.log("hello"));

ㅁmorgan
 1. logger라는 미들웨어를 morgan("dev")로 생성
 - const logger = morgan("dev");
 - app.use(logger); //morgan함수는 미들웨어를 리턴줌
 2. dev,combined 등 원하는 정보를 얻을 수 있음

 ㅁ 미들웨어 
  1. 미들웨어 종료 
     return res.end(); //*request 종료. request가 왔으면 response를 return해줘야함.